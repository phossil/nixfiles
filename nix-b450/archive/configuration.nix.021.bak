# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).
# edited by phossil
# 2022-06-17
# MSI B450 Gaming Plus Max

# lib is required for custom kernel
{ config, pkgs, ... }:
#{ lib, config, pkgs, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
      ./userspace-sw.nix
      ./fonts.nix
    ];

  # gimme that nix command goodness
  nix.extraOptions = ''
    experimental-features = nix-command flakes
  '';

  # Allow non-free software
  nixpkgs.config.allowUnfree = true;

  # boot options
  boot = {
    # Use the systemd-boot EFI boot loader.
    loader.systemd-boot.enable = true;
    loader.efi.canTouchEfiVariables = true;
    
    # latest Linux kernel
    #kernelPackages = pkgs.linuxPackages_latest;
    # latest xanmod Linux kernel
    kernelPackages = pkgs.linuxPackages_xanmod_latest;
    # use the custom kernel instead
    #kernelPackages = pkgs.linux95;
    # driver for extra amd zen cpu sensors
    ## TODO: build with clang
    extraModulePackages = with config.boot.kernelPackages; [ zenpower ];
    # amd graphics and zenpower, immediately on boot
    #initrd.kernelModules = [ "amdgpu" ];
    initrd.kernelModules = [ "amdgpu" "zenpower" ];
    # blacklist the radeon graphics and amd temp sensor drivers
    #blacklistedKernelModules = [ "radeon" ];
    blacklistedKernelModules = [ "radeon" "k10temp" ];
    # for R7 250, a Southern Islands (SI ie. GCN 1) card
    kernelParams = [ "radeon.si_support=0" "amdgpu.si_support=1" ];
  };

  hardware = {
    # disable PulseAudio bc PipeWire is better
    pulseaudio.enable = false;
    # enable bluetooth
    bluetooth.enable = true;
    # Enable scanner support because that's not included ???
    sane.enable = true;
    # hardware accelerated graphics
    opengl = {
      enable = true;
      extraPackages = with pkgs; [
        # add the official amd vulkan driver just in case (mesa is better, t. phoronix)
        amdvlk
        # video acceleration (youtube is nice)
        vaapiVdpau
        libvdpau-va-gl
        # opencl on an old card ???
        rocm-opencl-icd
        rocm-opencl-runtime
      ];
      # enable 32-bit support because Steam 
      driSupport32Bit = true;
      # amdvlk but 32-bit
      extraPackages32 = with pkgs; [
        driversi686Linux.amdvlk
      ];
    };
  };

  # interwebs ?
  networking = {
    # Define your hostname.
    hostName = "Gem-B450";
    # use NetworkManager for managing networks ... it's in the name
    networkmanager.enable = true;

    firewall = {
      # Open ports in the firewall.
      # allowedTCPPorts = [ ... ];
      # allowedUDPPorts = [ ... ];
      # Or disable the firewall altogether.
      # enable = false;
      ## when KDE Connect
      allowedTCPPortRanges = [
        { from = 1714; to = 1764; }
      ];
      allowedUDPPortRanges = [
        { from = 1714; to = 1764; }
      ];
      # when wake-on-lan
      allowedUDPPorts = [ 40000 ];
      # for the random darkhttp instance
      allowedTCPPorts = [ 8008 ];
    };
  };

  # Set your time zone.
  time.timeZone = "America/New_York";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";
  console = {
    #keyMap = "us";
    # use the X11 keymap settings instead
    useXkbConfig = true;
    # fonts in the tty ???
    #font = "Lat2-Terminus16";
    font = "cybercafe";
  };


  # List services that you want to enable:
  services = {
    # graphics and stuff
    xserver = {
      # Enable the X11 windowing system.
      enable = true;
      # Configure keymap in X11
      layout = "us";
      # Map Caps Lock as an additional Ctrl key
      xkbOptions = "ctrl:nocaps";
      # xorg amdpu driver ??? (does it still matter if i use wayland)
      videoDrivers = [ "amdgpu" ];
      # Enable the GNOME 3 Desktop Environment.
      displayManager.gdm.enable = true;
      desktopManager.gnome.enable = true;
      # Enable touchpad with tap-to-click support
      libinput.touchpad.tapping = true;
    };
    # Enable CUPS with some drivers to print documents.
    printing.enable = true;
    printing.drivers = [ pkgs.samsung-unified-linux-driver ];
    # Enable the OpenSSH daemon.
    ## please don't, it's just a personal device
    openssh.enable = true;
    # userspace out-of-memory killer so your system doesn't freeze
    earlyoom.enable = true;
    # Avahi or something
    avahi = {
      enable = true;
      publish = {
        enable = true;
        addresses = true;
        workstation = true;
      };
    };
    # Flatpak, the unnecessary package manager
    #flatpak.enable = true;
    # firmware updates and stuff
    fwupd.enable = true;  
  };

  # make qt apps look good in gnome
  qt5 = {
    enable = true;
    platformTheme = "gnome";
    style = "adwaita-dark";
  };

  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    jack.enable = true;
    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
    media-session.config.bluez-monitor.rules = [
      {
        # Matches all cards
        matches = [ { "device.name" = "~bluez_card.*"; } ];
        actions = {
          "update-props" = {
            "bluez5.reconnect-profiles" = [ "hfp_hf" "hsp_hs" "a2dp_sink" ];
            # mSBC is not expected to work on all headset + adapter combinations.
            "bluez5.msbc-support" = true;
            # SBC-XQ is not expected to work on all headset + adapter combinations.
            "bluez5.sbc-xq-support" = true;
          };
        };
      }
      {
        matches = [
          # Matches all sources
          { "node.name" = "~bluez_input.*"; }
          # Matches all outputs
          { "node.name" = "~bluez_output.*"; }
        ];
        actions = {
          "node.pause-on-idle" = false;
        };
      }
    ];
    # hey discord, please support pipewire so I don't need to use sinks
    # thank you
    config.pipewire = {
      "context.objects" = [
        {
          # A default dummy driver. This handles nodes marked with the "node.always-driver"
          # property when no other driver is currently active. JACK clients need this.
          factory = "spa-node-factory";
          args = {
            "factory.name"     = "support.node.driver";
            "node.name"        = "Dummy-Driver";
            "priority.driver"  = 8000;
          };
        }
        {
          factory = "adapter";
          args = {
            "factory.name"     = "support.null-audio-sink";
            "node.name"        = "Microphone-Proxy";
            "node.description" = "Microphone";
            "media.class"      = "Audio/Source/Virtual";
            "audio.position"   = "MONO";
          };
        }
        {
          factory = "adapter";
          args = {
            "factory.name"     = "support.null-audio-sink";
            "node.name"        = "Main-Output-Proxy";
            "node.description" = "Main Output";
            "media.class"      = "Audio/Sink";
            "audio.position"   = "FL,FR";
          };
        }
      ];
    };
  };

  # user management
  users = {
    # specify group ID because `useradd -mUs /bin/zsh phossil` 
    groups.phossil.gid = 1000;
    # Define a user account. Don't forget to set a password with ‘passwd’.
    users.phossil = {
      isNormalUser = true;
      shell = pkgs.zsh;
      home = "/home/phossil";
      description = "Phosu Parsons";
      # `useradd -mUs /bin/zsh phossil`
      uid = 1000;
      group = "phossil";
      # Run 'sudo' commands, manage VM's, commit tax fraud on android, 
      # make scans of crappy drawings, and use Zrythm/"JACK" with unlimited powah
      extraGroups = [ "wheel" "libvirtd" "audio" "adbusers" "scanner" "lp" ];
    };
  };

  programs = {
    # install zsh with autosuggestions
    zsh = {
      enable = true;
      autosuggestions.enable = true;
    };
    # games on linux ???
    steam.enable = true;
    # sun did it better
    java = {
      enable = true;
      package = pkgs.graalvm17-ce;
      #package = pkgs.jdk;
      #package = pkgs.jdk16;
    };
    # Some programs need SUID wrappers, can be configured further or are
    # started in user sessions.
    # programs.mtr.enable = true;
    # Please leave the agent enabled; it is required for pinentry, I think
    ###
    gnupg.agent = {
      enable = true;
      enableSSHSupport = true;
    };
    ###
    # enable for libvirt ?
    dconf.enable = true;
    # say hello to lineageOS
    adb.enable = true;
  };
  
  # use kvm/qemu virtual machines
  virtualisation.libvirtd.enable = true;
  # enable Waydroid for Android apps
  virtualisation.waydroid.enable = true;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  #system.stateVersion = "21.05"; # Did you read the comment?
  #system.stateVersion = "21.11"; # Did you read the comment?
  system.stateVersion = "22.05"; # Did you read the comment?
  
  # added by phossil
  ##################
  # PLEASE STOP FALLOCATING THE NIX STORE, THANK YOU
  # an annoyed btrfs user
  #nix.extraOptions = "preallocate-contents = false";
  # i genuinely forgot what this was for
  xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-kde ];
  # define lv2 path and some other stuff because zrythm
  # copied from musnix/modules/base.nix
  environment.variables = {
    DSSI_PATH   = "$HOME/.dssi:$HOME/.nix-profile/lib/dssi:/run/current-system/sw/lib/dssi";
    LADSPA_PATH = "$HOME/.ladspa:$HOME/.nix-profile/lib/ladspa:/run/current-system/sw/lib/ladspa";
    LV2_PATH    = "$HOME/.lv2:$HOME/.nix-profile/lib/lv2:/run/current-system/sw/lib/lv2";
    LXVST_PATH  = "$HOME/.lxvst:$HOME/.nix-profile/lib/lxvst:/run/current-system/sw/lib/lxvst";
    VST_PATH    = "$HOME/.vst:$HOME/.nix-profile/lib/vst:/run/current-system/sw/lib/vst";
  };
  # rtkit is optional but recommended for PipeWire
  security.rtkit.enable = true;
  # memory unlocking for zrythm, hopefully
  security.pam.loginLimits = [
    { domain = "@audio"; item = "memlock"; type = "-"; value = "unlimited"; }
    { domain = "@audio"; item = "rtprio"; type = "-"; value = "95"; }
  ];
}
